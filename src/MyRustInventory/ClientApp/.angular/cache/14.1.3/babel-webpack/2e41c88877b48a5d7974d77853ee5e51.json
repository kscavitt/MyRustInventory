{"ast":null,"code":"import _asyncToGenerator from \"C:/Dev/repos/MyRustInventory/MyRustInventory/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\n\nfunction FetchDataComponent_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\")(1, \"em\");\n    i0.ɵɵtext(2, \"Loading...\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction FetchDataComponent_table_3_tr_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵelement(10, \"img\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const item_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r3.classid);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r3.amount);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r3.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r3.marketHashName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"src\", item_r3.iconUrl, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r3.lowestPrice);\n  }\n}\n\nfunction FetchDataComponent_table_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 3)(1, \"thead\")(2, \"tr\")(3, \"th\");\n    i0.ɵɵtext(4, \"ClassId\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\");\n    i0.ɵɵtext(6, \"Ammount\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8, \"Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\");\n    i0.ɵɵtext(10, \"MHN\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"th\");\n    i0.ɵɵtext(12, \"Image\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"th\");\n    i0.ɵɵtext(14, \"Lowest Price\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(15, \"tbody\");\n    i0.ɵɵtemplate(16, FetchDataComponent_table_3_tr_16_Template, 13, 6, \"tr\", 4);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(16);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.rustItems.inventoryItems);\n  }\n}\n\nexport class FetchDataComponent {\n  constructor(http, baseUrl) {\n    var _this = this;\n\n    this._sleepDuration = 1000;\n    this._baseUrl = '';\n    this.rustItems = {};\n    this.tradeables = [];\n    http.get(baseUrl + 'Steam/GetInventory').subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (result) {\n        var _a;\n\n        _this.rustItems = result;\n\n        if (_this.rustItems.inventoryItems) {\n          // log market call\n          console.log('staring market call for ' + (_this.rustItems.inventoryItems.length - 1) + ' items.'); // loop inventory\n\n          for (var i = 0; i < _this.rustItems.inventoryItems.length - 1; i++) {\n            // set price placeholder\n            _this.rustItems.inventoryItems[i].lowestPrice = '--'; // only process if item is tradable\n\n            if (_this.rustItems.inventoryItems[i].tradable) {\n              // get the market hash name\n              let mhn = (_a = _this.rustItems.inventoryItems[i].marketHashName) !== null && _a !== void 0 ? _a : ''; // create url base and URI encode the market hash name\n\n              let url = baseUrl + 'Steam/GetMarketData/' + encodeURI(mhn) + '/1'; // get the market data\n\n              http.get(url).subscribe(result => {\n                // declare market data from the results\n                let marketData = result; // log market details\n\n                console.log('found market details for ' + mhn + ' lowest price = ' + marketData.lowest_Price); // null check\n\n                if (_this.rustItems.inventoryItems) {\n                  // set the lowest price\n                  _this.rustItems.inventoryItems[i].lowestPrice = marketData.lowest_Price; // log price to console\n\n                  console.log('set price data to  ' + _this.rustItems.inventoryItems[i].lowestPrice);\n                }\n              }, error => console.error(error));\n            } // log current process number\n\n\n            console.log('processed ${i} of ${this.rustItems.inventoryItems.length - 1)}'); // sleep to avoid steam rate limiter\n\n            yield new Promise(f => setTimeout(f, _this._sleepDuration));\n          }\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }(), error => console.error(error));\n    console.log(this.tradeables);\n  }\n\n}\n\nFetchDataComponent.ɵfac = function FetchDataComponent_Factory(t) {\n  return new (t || FetchDataComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n};\n\nFetchDataComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FetchDataComponent,\n  selectors: [[\"app-fetch-data\"]],\n  decls: 4,\n  vars: 2,\n  consts: [[\"id\", \"tableLabel\"], [4, \"ngIf\"], [\"class\", \"table table-striped\", \"aria-labelledby\", \"tableLabel\", 4, \"ngIf\"], [\"aria-labelledby\", \"tableLabel\", 1, \"table\", \"table-striped\"], [4, \"ngFor\", \"ngForOf\"], [3, \"src\"]],\n  template: function FetchDataComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\", 0);\n      i0.ɵɵtext(1, \"Rust Inventory\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, FetchDataComponent_p_2_Template, 3, 0, \"p\", 1);\n      i0.ɵɵtemplate(3, FetchDataComponent_table_3_Template, 17, 1, \"table\", 2);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", !(ctx.rustItems.inventoryItems == null ? null : ctx.rustItems.inventoryItems.length));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.rustItems.inventoryItems == null ? null : ctx.rustItems.inventoryItems.length);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["i0","FetchDataComponent","constructor","http","baseUrl","get","subscribe","result","rustItems","inventoryItems","console","log","length","i","lowestPrice","tradable","mhn","marketHashName","_a","url","encodeURI","marketData","lowest_Price","error","Promise","f","setTimeout","_sleepDuration","tradeables","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Dev\\repos\\MyRustInventory\\MyRustInventory\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.html","C:\\Dev\\repos\\MyRustInventory\\MyRustInventory\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.ts"],"sourcesContent":["<h1 id=\"tableLabel\">Rust Inventory</h1>\r\n\r\n<p *ngIf=\"!rustItems.inventoryItems?.length\"><em>Loading...</em></p>\r\n\r\n<table class='table table-striped' aria-labelledby=\"tableLabel\" *ngIf=\"rustItems.inventoryItems?.length\">\r\n  <thead>\r\n    <tr>\r\n      <th>ClassId</th>\r\n      <th>Ammount</th>\r\n      <th>Name</th>\r\n      <th>MHN</th>\r\n      <th>Image</th>\r\n      <th>Lowest Price</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr *ngFor=\"let item of rustItems.inventoryItems\">\r\n      <td>{{ item.classid }}</td>\r\n      <td>{{ item.amount }}</td>\r\n      <td>{{ item.name }}</td>\r\n      <td>{{ item.marketHashName }}</td>\r\n      <td><img [src]=\"item.iconUrl\"></td>\r\n      <td>{{ item.lowestPrice }}</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n","import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RustItemsResponse} from '../interfaces/rust-items-response';\r\nimport { MarketDataResponse } from '../interfaces/market-data-response';\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-data.component.html'\r\n})\r\nexport class FetchDataComponent {\r\n\r\n  private _sleepDuration: number = 1000;\r\n  \r\n  private _baseUrl: string = '';\r\n\r\n  public rustItems: RustItemsResponse = <RustItemsResponse>{};\r\n  public tradeables: Array<string> = [];\r\n\r\n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n\r\n    http.get<RustItemsResponse>(baseUrl + 'Steam/GetInventory').subscribe(async result => {\r\n      this.rustItems = result;\r\n\r\n      if (this.rustItems.inventoryItems) {\r\n\r\n        // log market call\r\n        console.log('staring market call for ' + (this.rustItems.inventoryItems.length -1) + ' items.');\r\n\r\n        // loop inventory\r\n        for (var i = 0; i < this.rustItems.inventoryItems.length - 1; i++)\r\n        {\r\n\r\n          // set price placeholder\r\n          this.rustItems.inventoryItems[i].lowestPrice = '--';\r\n         \r\n          // only process if item is tradable\r\n          if (this.rustItems.inventoryItems[i].tradable) {\r\n\r\n            // get the market hash name\r\n            let mhn = this.rustItems.inventoryItems[i].marketHashName ?? '';\r\n\r\n            // create url base and URI encode the market hash name\r\n            let url = baseUrl + 'Steam/GetMarketData/' + encodeURI(mhn) + '/1';\r\n\r\n            // get the market data\r\n            http.get<MarketDataResponse>(url).subscribe(result => {\r\n\r\n              // declare market data from the results\r\n              let marketData = result;\r\n              // log market details\r\n              console.log('found market details for ' + mhn + ' lowest price = ' + marketData.lowest_Price);\r\n\r\n              // null check\r\n              if (this.rustItems.inventoryItems) {\r\n                // set the lowest price\r\n                this.rustItems.inventoryItems[i].lowestPrice = marketData.lowest_Price;\r\n                // log price to console\r\n                console.log('set price data to  ' + this.rustItems.inventoryItems[i].lowestPrice);\r\n              }\r\n\r\n            }, error => console.error(error));\r\n          }\r\n\r\n          // log current process number\r\n          console.log('processed ${i} of ${this.rustItems.inventoryItems.length - 1)}');\r\n\r\n          // sleep to avoid steam rate limiter\r\n          await new Promise(f => setTimeout(f, this._sleepDuration))\r\n        }\r\n      }\r\n    }, error => console.error(error));\r\n\r\n    console.log(this.tradeables);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}